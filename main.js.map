{"version":3,"file":"main.js","mappings":"mBAEA,IAAMA,EAAWC,SAASC,cAAc,aAClCC,EAAeF,SAClBC,cAAc,qBACdE,QAAQF,cAAc,YAEnBG,EAAiBJ,SAASC,cAAc,aACxCI,EAAeD,EAAeH,cAAc,aAC5CK,EAAeF,EAAeH,cAAc,aAC5CM,EAAkBH,EAAeH,cAAc,qBAE/CO,EAAcR,SAASC,cAAc,oBACrCQ,EAAmBT,SAASC,cAAc,2BAC1CS,EAAqBV,SAASC,cAAc,wBAC5CU,EAAaX,SAASC,cAAc,gBACpCW,EAAcZ,SAASC,cAAc,iBACrCY,EAAcb,SAASC,cAAc,uBAKrCa,EAAed,SAASC,cAAc,UAEtCc,EAAmBf,SAASC,cAAc,eAE1Ce,EAAehB,SAASC,cAAc,cAEtCgB,EAAejB,SAASC,cAAc,cAEtCiB,EAAclB,SAASC,cAAc,8BAErCkB,EAASnB,SAASC,cAAc,0BAChCmB,EAAsBpB,SAASC,cAAc,iBAE7CoB,EAAeJ,EAAahB,cAAc,6BAC1CqB,EAAaD,EAAapB,cAAc,mBACxCsB,EAAUF,EAAapB,cAAc,gBAErCuB,EAAgBxB,SAASC,cAAc,mBAIvCwB,GAFgBzB,SAASC,cAAc,mBAErBD,SAASC,cAAc,UACzCyB,EAAYD,EAAgBxB,cAAc,eAC1C0B,EAAWF,EAAgBxB,cAAc,QAEzC2B,EAAc5B,SAASC,cAAc,uBACrC4B,EAAa7B,SAASC,cAAc,iBAEpC6B,EAAmB,CACvBC,aAAc,QACdC,cAAe,eACfC,qBAAsB,gBACtBC,oBAAqB,uBACrBC,gBAAiB,sBACjBC,WAAY,SAGRC,EAAc,SAAC,GAA4C,IAA3CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,WAC3CF,IAAUV,EAAYa,YAAcH,GACpCC,IAAiBV,EAAWY,YAAcF,GAC1CC,IAAYhC,EAAYkC,IAAMF,ICrD9BG,EAAgB,SAACC,GACrB,GAAgB,WAAZA,EAAIC,IAAkB,CACxB,IAAMC,EAAc9C,SAASC,cAAc,iBAC3C8C,EAAWD,KAKTE,EAAU,SAACJ,GACf,IAAME,EAAc9C,SAASC,cAAc,kBAEzC2C,EAAIK,OAAOC,UAAUC,SAAS,UAC9BP,EAAIK,OAAOC,UAAUC,SAAS,gBAE9BJ,EAAWD,IAITM,EAAY,SAACC,GACjBA,EAAMH,UAAUI,IAAI,gBACpBtD,SAASuD,iBAAiB,UAAWZ,GACrCU,EAAME,iBAAiB,YAAaP,IAUhCD,EAAa,SAACM,GAClBA,EAAMH,UAAUM,OAAO,gBACvBxD,SAASyD,oBAAoB,UAAWd,GACxCU,EAAMI,oBAAoB,YAAaT,ICrBnCU,EAAoB,SAACC,GAAqC,IAA7BC,EAA6B,wDAAXC,EAAW,uCAC1DD,GACFD,EAAOT,UAAUM,OAAOK,EAAO3B,qBAC/ByB,EAAOG,UAAW,IAElBH,EAAOT,UAAUI,IAAIO,EAAO3B,qBAC5ByB,EAAOG,SAAW,aC5BhBD,EAAS,CACbE,IAAK,mDACLC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAIdC,EAAa,SAACC,GAClB,OAAOA,EAAIC,GAAKD,EAAIE,OAASC,QAAQC,OAAOJ,ICoBxCK,EAAmB,SAACC,EAAaC,EAAYC,GACjD,IAAMC,EAAaH,EAAYxE,cAAc,oBAC1BwE,EAAYxE,cAAc,yBAElCwC,YAAciC,EAAWG,OAZf,SAACH,EAAYC,GAClC,OAAOG,QACLJ,EAAWK,MAAK,SAACC,GACf,OAAOA,EAAQC,MAAQN,MAWxBO,CAAQR,EAAYC,GACrBC,EAAW1B,UAAUI,IAAI,0BAEzBsB,EAAW1B,UAAUM,OAAO,2BAI1B2B,EAAyB,SAACC,EAAQF,EAAST,EAAaE,GDoB9D,IAA0BU,EAAQC,GAARD,ECnBPD,EDmBeE,ECnBPJ,EDoBhBK,MAAM,GAAD,OAAI1B,EAAOE,IAAX,wBAA8BsB,GAAU,CAClDG,OAAQF,EAAS,SAAW,MAC5BtB,QAASH,EAAOG,UACfyB,KAAKvB,ICtBPuB,MAAK,SAACC,GACLlB,EAAiBC,EAAaiB,EAAeC,MAAOhB,MAErDiB,OAAM,SAACC,GACNC,QAAQC,IAAR,6BAAkCF,EAAIG,aAQtCC,EAAmB,SAACxB,EAAaW,IDDvC,SAAoBA,GAClB,OAAOG,MAAM,GAAD,OAAI1B,EAAOE,IAAX,kBAAwBqB,GAAU,CAC5CI,OAAQ,SACRxB,QAASH,EAAOG,UACfyB,KAAKvB,ICFRgC,CAAWd,GACVK,MAAK,WACMhB,EANJjB,YAQPoC,OAAM,SAACC,GACNC,QAAQC,IAAR,8BAAmCF,EAAIG,a,0GCV3C,IAAIrB,EAAS,KAGb,SAASwB,EAAWC,EAAMC,EAAW1B,GACnC,IAAM2B,EDekB,SAAUF,EAAMzB,EAAQQ,EAAwBc,GACxE,IAAMxB,EAAcvE,EAAaqG,WAAU,GACrCC,EAAY/B,EAAYxE,cAAc,qBACtCwG,EAAWhC,EAAYxE,cAAc,kBACrC2E,EAAaH,EAAYxE,cAAc,oBACvCyG,EAAgBjC,EAAYxE,cAAc,4BAuBhD,OArBAuG,EAAU9D,IAAM0D,EAAKO,KACrBH,EAAUI,IAAMR,EAAKS,KACrBJ,EAAShE,YAAc2D,EAAKS,KAE5BrC,EAAiBC,EAAa2B,EAAKT,MAAOhB,GAEtCyB,EAAKU,MAAM7B,MAAQN,GACrB+B,EAAclD,SAGhBgD,EAAUjD,iBAAiB,SAAS,kBA1EZ,SAAU6C,GAClC9E,EAAWoB,IAAM0D,EAAKO,KACtBrF,EAAWsF,IAAMR,EAAKS,KACtBtF,EAAQkB,YAAc2D,EAAKS,KAC3BzD,EAAUnC,GAsEgC8F,CAAWX,MAErDxB,EAAWrB,iBAAiB,SAAS,WACnC4B,EAAuBiB,EAAKnB,IAAKL,EAAW1B,UAAUC,SAAS,0BAA2BsB,EAAaE,MAIzG+B,EAAcnD,iBAAiB,SAAS,WACtC0C,EAAiBxB,EAAa2B,EAAKnB,QAG9BR,EC3CMuC,CACXZ,EACAzB,EACAQ,EACAc,GAEFI,EAAUY,QAAQX,GFnCXhC,QAAQ4C,IAAI,CAPZ3B,MAAM,GAAD,OAAI1B,EAAOE,IAAX,UAAwB,CAClCyB,OAAQ,MACRxB,QAASH,EAAOG,UACfyB,KAAKvB,GAVDqB,MAAM,GAAD,OAAI1B,EAAOE,IAAX,aAA2B,CACrCyB,OAAQ,MACRxB,QAASH,EAAOG,UACfyB,KAAKvB,KEkDGuB,MAAK,YAAmB,I,IAAA,G,EAAA,E,4CAAA,I,gxBAAjB0B,EAAiB,KAAVC,EAAU,KACnC/E,EAAY,CACVC,SAAU8E,EAAKP,KACftE,gBAAiB6E,EAAKC,MACtB7E,WAAY4E,EAAKE,SAEnB3C,EAASyC,EAAKnC,IAEdkC,EAAMI,UAAUC,SAAQ,SAAClB,GACvBH,EAAWG,EAAMvG,EAAU4E,SAI/BlE,EAAiB8C,iBAAiB,SAAS,WACzCH,EAAUxC,GACV6G,EAAiB/G,MAInBQ,EAAYqC,iBAAiB,SAAS,WACpCH,EAAUtC,GJnDVY,EAAUgG,MAAQ9F,EAAYa,YAC9Bd,EAAS+F,MAAQ7F,EAAWY,YIoD5BgF,EAAiBrG,MAGnBL,EAAiBwC,iBAAiB,SAAS,WACzCR,EAAWjC,MAIbK,EAAOoC,iBAAiB,SAAS,WAC/BH,EAAUpC,GACVyG,EAAiBlH,MAGnBiB,EAAc+B,iBAAiB,SAAS,WACtCR,EAAW/B,MAIbS,EAAgB8B,iBAAiB,SAAUoE,GAC3CrG,EAAWiC,iBAAiB,SAAS,WACnCH,EAAU9B,MAGZ,IAAMmG,EAAoB,SAAC9D,GACzBA,EAAOJ,iBAAiB,SAAS,WAC9BI,EAAO+D,MAAQ,mBAElB/D,EAAO+D,MAAQ,aAGV,SAASC,EAAsB/E,GAEpC,IFzFuBwD,EEwFvBxD,EAAIgF,kBFxFmBxB,EEyFH,CAClBS,KAAMnF,EAAUgG,MAChBL,MAAO1F,EAAS+F,OF1FTnC,MAAM,GAAD,OAAI1B,EAAOE,IAAX,aAA2B,CACrCyB,OAAQ,QACRxB,QAASH,EAAOG,QAChB6D,KAAMC,KAAKC,UAAU3B,KACpBX,KAAKvB,IEyFPuB,MAAK,SAACW,GACL/D,EAAY,CACVC,SAAU8D,EAAKS,KACftE,gBAAiB6D,EAAKiB,WAGzBzB,OAAM,SAACC,GACNC,QAAQC,IAAR,iCAAsCF,EAAIG,YAG9CjD,EAAWjC,GAEbM,EAAoBmC,iBAAiB,SAAUoE,GAqB/CvH,EAAemD,iBAAiB,UAlBzB,SAA8BX,GAEnC,IFtGewD,EEqGfxD,EAAIgF,kBFrGWxB,EEsGC,CACdS,KAAMxG,EAAaqH,MACnBf,KAAMrG,EAAaoH,OFvGdnC,MAAM,GAAD,OAAI1B,EAAOE,IAAX,UAAwB,CAClCyB,OAAQ,OACRxB,QAASH,EAAOG,QAChB6D,KAAMC,KAAKC,UAAU3B,KACpBX,KAAKvB,IEsGLuB,MAAK,SAACW,GACLD,EAAWC,EAAMrG,EAAU4E,GAC3B5B,EAAW/B,GACXZ,EAAe4H,WAEhBpC,OAAM,SAACC,GACNC,QAAQC,IAAR,iCAAsCF,EAAIG,YAG9CtC,EAAkBnD,GAAiB,EAAOuB,MAwB5CpB,EAAmB6C,iBAAiB,SAnB7B,SAAiCX,GAEtC,IF9FyBwD,EE6FzBxD,EAAIgF,kBF7FqBxB,EE8FP,CAChBkB,OAAQzG,EAAY6G,OF9FfnC,MAAM,GAAD,OAAI1B,EAAOE,IAAX,oBAAkC,CAC5CyB,OAAQ,QACRxB,QAASH,EAAOG,QAChB6D,KAAMC,KAAKC,UAAU3B,KACpBX,KAAKvB,IE6FLuB,MAAK,SAACwC,GACL5F,EAAY,CACVG,WAAYyF,EAAWX,SAEzBvE,EAAWnC,GACXD,EAAWqH,WAEZpC,OAAM,SAACC,GACNC,QAAQC,IAAR,iCAAsCF,EAAIG,YAG9CtC,EAAkBhD,GAAoB,EAAOoB,MAKtB,SAAC+B,GACxB,IAAMqE,EAAQlI,SAASmI,iBAAiBtE,EAAO9B,cAC/CqG,MAAMC,KAAKH,GAAOV,SAAQ,SAACc,IHzJE,SAACA,EAAazE,GAC3C,IAAM0E,EAAaD,EAAYH,iBAAiBtE,EAAO7B,eACjDwG,EAAeF,EAAYrI,cAAc4D,EAAO5B,sBACtDyB,EAAkB8E,EAAcF,EAAYG,gBAAiB5E,GAE7DuE,MAAMC,KAAKE,GAAYf,SAAQ,SAACkB,GAC9BA,EAAanF,iBAAiB,SAAS,WACrC,IAAMoF,EAAcL,EAAYG,iBA5BX,SAACH,EAAaI,EAAc7E,GACrD,IAAM+E,GAAmBF,EAAaG,SAASC,MACzCC,EAAeT,EAAYrI,cAAZ,WAA8ByI,EAAaM,GAA3C,WAEjBJ,EAdY,SAACG,EAAcL,EAAc7E,GAC7CkF,EAAatG,YAAciG,EAAaO,kBACxCP,EAAaxF,UAAUI,IAAIO,EAAO1B,iBAahC+G,CAAUH,EAAcL,EAAc7E,GAVxB,SAACkF,EAAcL,EAAc7E,GAC7CkF,EAAatG,YAAc,GAC3BiG,EAAaxF,UAAUM,OAAOK,EAAO1B,iBAUnCgH,CAAUJ,EAAcL,EAAc7E,GAsBpCuF,CAAmBd,EAAaI,EAAc7E,GAC9CH,EAAkB8E,EAAcG,EAAa9E,SAIjDyE,EAAY/E,iBAAiB,UAAU,SAACX,GACtCA,EAAIgF,oBG4IJyB,CAAgBf,EAAazE,MAGjCyF,CAAiBxH,I","sources":["webpack://mesto-project/./src/utils/constants.js","webpack://mesto-project/./src/components/modal.js","webpack://mesto-project/./src/components/validation.js","webpack://mesto-project/./src/components/api.js","webpack://mesto-project/./src/components/card.js","webpack://mesto-project/./src/pages/index.js"],"sourcesContent":["\r\n/** находим в html секцию с разметкой для карточек */\r\nconst cardList = document.querySelector(\".elements\");\r\nconst cardTemplate = document\r\n  .querySelector(\"#element-template\")\r\n  .content.querySelector(\".element\");\r\n/** Находим форму для добавления картинок в DOM */\r\nconst formElementImg = document.querySelector(\".form_img\");\r\nconst imgInputName = formElementImg.querySelector(\"#img-name\");\r\nconst imgInputLink = formElementImg.querySelector(\"#img-link\");\r\nconst imgButtonSubmit = formElementImg.querySelector(\".form__button_img\");\r\n\r\nconst avatarImage = document.querySelector(\".profile__avatar\");\r\nconst avatarOpenButton = document.querySelector(\".profile__avatar-button\");\r\nconst avatarButtonSubmit = document.querySelector(\".form__button_avatar\");\r\nconst avatarForm = document.querySelector(\".form_avatar\");\r\nconst popupAvatar = document.querySelector(\".popup_avatar\");\r\nconst avatarInput = document.querySelector(\".form__input_avatar\");\r\n\r\n\r\n/** ПОПАПЫ */\r\n/** Находим попап редактирования профиля в DOM */\r\nconst popupProfile = document.querySelector(\".popup\");\r\n/** Находим кнопку, которая должна закрывать попап, отвечающий за редактирования профиля */\r\nconst popupButtonClose = document.querySelector(\".close-item\");\r\n/** Находим попап для добавления изображений */\r\nconst popupAddCard = document.querySelector(\".popup_img\");\r\n/** Находим попап для просмотра фото */\r\nconst popupPicture = document.querySelector(\".popup_pic\");\r\n/** Находим кнопку которая открывает попап редактирования профиля */\r\nconst popupButton = document.querySelector(\".profile__button-rectangle\");\r\n/** Находим кнопку, которая должна открывать попап добавления изображения */\r\nconst addImg = document.querySelector(\".profile__button-pluss\");\r\nconst submitButtonProfile = document.querySelector(\".form__button\");\r\n/** попап просмотра фото */\r\nconst picPopupCont = popupPicture.querySelector(\".popup__container_picture\");\r\nconst picPopupEl = picPopupCont.querySelector(\".popup__picture\");\r\nconst picText = picPopupCont.querySelector(\".popup__text\");\r\n/** кнопка закрытия попап, который добавляет изображения */\r\nconst imgPopupClose = document.querySelector(\".close-item_img\");\r\n/** кнопка закрытия попап, который просматривает изображения */\r\nconst picPopupClose = document.querySelector(\".close-item_pic\");\r\n/** находим форму редактирования профиля в DOM */\r\nconst formEditProfile = document.querySelector(\".form\");\r\nconst nameInput = formEditProfile.querySelector(\"#first-name\");\r\nconst jobInput = formEditProfile.querySelector(\"#job\");\r\n/** Находим значения имя и занятия в html коде */\r\nconst profileName = document.querySelector(\".profile__firstname\");\r\nconst profileJob = document.querySelector(\".profile__job\");\r\n\r\nconst validationConfig = {\r\n  formSelector: \".form\",\r\n  inputSelector: \".form__input\",\r\n  submitButtonSelector: \".form__button\",\r\n  inactiveButtonClass: \"form__button_invalid\",\r\n  inputErrorClass: \"form__input_invalid\",\r\n  errorClass: \"error\",\r\n};\r\n\r\nconst setUserInfo = ({userName, userDescription, userAvatar}) => {\r\n  if (userName) profileName.textContent = userName;\r\n  if (userDescription) profileJob.textContent = userDescription;\r\n  if (userAvatar) avatarImage.src = userAvatar;\r\n};\r\n\r\nexport {\r\n  avatarInput,\r\n  setUserInfo,\r\n  popupAvatar,\r\n  avatarOpenButton,\r\n  avatarForm,\r\n  avatarButtonSubmit,\r\n  avatarImage,\r\n  submitButtonProfile,\r\n  validationConfig,\r\n  cardList,\r\n  cardTemplate,\r\n  formElementImg,\r\n  imgInputName,\r\n  imgInputLink,\r\n  imgButtonSubmit,\r\n  profileJob,\r\n  profileName,\r\n  jobInput,\r\n  nameInput,\r\n  formEditProfile,\r\n  picPopupClose,\r\n  imgPopupClose,\r\n  picText,\r\n  picPopupEl,\r\n  picPopupCont,\r\n  addImg,\r\n  popupButton,\r\n  popupPicture,\r\n  popupAddCard,\r\n  popupButtonClose,\r\n  popupProfile,\r\n};\r\n","/** добавляем функцию, которая отвечает за открытие попап, отвечающего за редактирование профиля */\r\nimport {\r\n  nameInput,\r\n  jobInput,\r\n  profileName,\r\n  profileJob,\r\n} from \"../utils/constants\";\r\n\r\n/**закрытие по esc и overlay */\r\nconst closeByEscape = (evt) => {\r\n  if (evt.key === \"Escape\") {\r\n    const activePopup = document.querySelector(\".popup_opened\");\r\n    closePopup(activePopup);\r\n  }\r\n};\r\n\r\n/**закрытие по overlay */\r\nconst overlay = (evt) => {\r\n  const activePopup = document.querySelector(\".popup_opened\");\r\n  if (\r\n    evt.target.classList.contains(\"popup\") ||\r\n    evt.target.classList.contains(\"close-item\")\r\n  ) {\r\n    closePopup(activePopup);\r\n  }\r\n};\r\n\r\nconst openPopup = (popup) => {\r\n  popup.classList.add(\"popup_opened\");\r\n  document.addEventListener(\"keydown\", closeByEscape);\r\n  popup.addEventListener(\"mousedown\", overlay);\r\n};\r\n\r\n/** функция, которая выводит в попап, указанные имя и деятельность */\r\nfunction addInfofromPopup() {\r\n  nameInput.value = profileName.textContent;\r\n  jobInput.value = profileJob.textContent;\r\n}\r\n\r\n//добавляем функцию для закрытия попапа\r\nconst closePopup = (popup) => {\r\n  popup.classList.remove(\"popup_opened\");\r\n  document.removeEventListener(\"keydown\", closeByEscape);\r\n  popup.removeEventListener(\"mousedown\", overlay);\r\n};\r\n\r\nconst closeByCross = () => {\r\n  const allCrosses = document.querySelectorAll('.close-item');\r\n  allCrosses.forEach((cross) => {\r\n    cross.addEventListener('click', closePopup)\r\n  })\r\n}\r\n\r\nexport { openPopup, addInfofromPopup, closePopup, closeByCross };\r\n","/**  Функция, которая добавляет класс с ошибкой */\r\nconst showError = (errorElement, inputElement, config) => {\r\n  errorElement.textContent = inputElement.validationMessage;\r\n  inputElement.classList.add(config.inputErrorClass);\r\n};\r\n/** Функция, которая удаляет класс с ошибкой */\r\nconst hideError = (errorElement, inputElement, config) => {\r\n  errorElement.textContent = \"\";\r\n  inputElement.classList.remove(config.inputErrorClass);\r\n};\r\n/** Функция, которая проверяет валидность поля */\r\nconst checkInputValidity = (formElement, inputElement, config) => {\r\n  const isInputNotValid = !inputElement.validity.valid;\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n\r\n  if (isInputNotValid) {\r\n    showError(errorElement, inputElement, config);\r\n  } else {\r\n    hideError(errorElement, inputElement, config);\r\n  }\r\n};\r\n\r\nconst toggleButtonState = (button, isActive = false, config) => {\r\n  if (isActive) {\r\n    button.classList.remove(config.inactiveButtonClass);\r\n    button.disabled = false;\r\n  } else {\r\n    button.classList.add(config.inactiveButtonClass);\r\n    button.disabled = \"disabled\";\r\n  }\r\n};\r\n\r\nexport const setEventListers = (formElement, config) => {\r\n  const inputsList = formElement.querySelectorAll(config.inputSelector);\r\n  const submitButton = formElement.querySelector(config.submitButtonSelector);\r\n  toggleButtonState(submitButton, formElement.checkValidity(), config);\r\n\r\n  Array.from(inputsList).forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      const isFormValid = formElement.checkValidity();\r\n      checkInputValidity(formElement, inputElement, config);\r\n      toggleButtonState(submitButton, isFormValid, config);\r\n    });\r\n  });\r\n\r\n  formElement.addEventListener(\"submit\", (evt) => {\r\n    evt.preventDefault();\r\n  });\r\n};\r\n\r\nexport { toggleButtonState };\r\n","const config = {\r\n  url: \"https://mesto.nomoreparties.co/v1/plus-cohort-13\",\r\n  headers: {\r\n    authorization: \"d1d14902-c78a-4d00-aa9d-9b64f78ed110\",\r\n    \"Content-type\": \"application/json\"\r\n  },\r\n};\r\n/** функция по проверке промисов */\r\nconst onResponse = (res) => {\r\n  return res.ok ? res.json() : Promise.reject(res);\r\n};\r\n/** 3.загрузка инфо о пользователе с сервера */\r\nfunction getProfileInfo() {\r\n  return fetch(`${config.url}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers\r\n  }).then(onResponse);\r\n}\r\n/** 4.загрузка карточек с сервера */\r\nfunction getAllCards() {\r\n  return fetch(`${config.url}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers\r\n  }).then(onResponse);\r\n}\r\n\r\nfunction getAllInfo() {\r\n  return Promise.all([getAllCards(), getProfileInfo()]);\r\n}\r\n\r\n/** 5.редактирование рофиля */\r\nfunction editProfileForm(data) {\r\n    return fetch(`${config.url}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: config.headers,\r\n      body: JSON.stringify(data),\r\n    }).then(onResponse);\r\n  }\r\n\r\n/** 6.добавление новой карточки */\r\nfunction addCard(data) {\r\n  return fetch(`${config.url}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify(data),\r\n  }).then(onResponse);\r\n}\r\n/** 7.отображение количества лайков */\r\nfunction likeAmount(dataId, likes) {\r\n  return fetch (`${config.url}/cards/likes/${dataId}`, {\r\n    method: \"GET\",\r\n    headers: config.headers\r\n  }).then(onResponse);\r\n  }\r\n/** 8.удаление карточки */\r\nfunction removeCard(cardId) {\r\n  return fetch(`${config.url}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers\r\n  }).then(onResponse);\r\n}\r\n/** 9.постановка или удаление лайка */\r\nfunction changeLikeStatus(dataId, isLike) {\r\n    return fetch(`${config.url}/cards/likes/${dataId}`, {\r\n      method: isLike ? \"DELETE\" : \"PUT\",\r\n      headers: config.headers\r\n    }).then(onResponse);\r\n  }\r\n/** 10.обновление аватара пользователя */\r\nfunction editProfileAvatar(data) {\r\n  return fetch(`${config.url}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify(data)\r\n  }).then(onResponse);\r\n}\r\n\r\nexport {\r\n  changeLikeStatus,\r\n  editProfileForm,\r\n  removeCard,\r\n  addCard,\r\n  getAllInfo,\r\n  getAllCards,\r\n  getProfileInfo,\r\n  editProfileAvatar\r\n};\r\n","import { openPopup } from \"./modal\";\r\nimport {\r\n  picPopupEl,\r\n  picText,\r\n  popupPicture,\r\n  cardTemplate,\r\n  cardList,\r\n  avatarImage\r\n} from \"../utils/constants.js\";\r\nimport { removeCard, changeLikeStatus } from \"./api\";\r\n\r\nexport { handleChangeLikeStatus, updateLikesState, handleDeleteCard, deleteImg, createAvatar };\r\n\r\n/** открытие попапа для просмотра фотографий по клику на карточку */\r\nexport const clickImage = function (data) {\r\n  picPopupEl.src = data.link;\r\n  picPopupEl.alt = data.name;\r\n  picText.textContent = data.name;\r\n  openPopup(popupPicture);\r\n};\r\n/** функция, которая определяет, поставлен лайк или нет */\r\nexport const isLiked = (likesArray, userId) => {\r\n  return Boolean(\r\n    likesArray.find((likeObj) => {\r\n      return likeObj._id === userId;\r\n    })\r\n  );\r\n};\r\n/**обновление кол-ва лайков */\r\nconst updateLikesState = (cardElement, likesArray, userId) => {\r\n  const likeButton = cardElement.querySelector(\".element__button\");\r\n  const likeAmount = cardElement.querySelector(\".element__like-amount\");\r\n\r\n  likeAmount.textContent = likesArray.length;\r\n\r\n  if(isLiked(likesArray, userId)) {\r\n    likeButton.classList.add(\"element__button_active\");\r\n  } else {\r\n    likeButton.classList.remove(\"element__button_active\");\r\n  }\r\n}\r\n/**функция которая отслеживает постановку лайка */\r\nconst handleChangeLikeStatus = (cardId, isLiked, cardElement, userId) => {\r\n  changeLikeStatus(cardId, isLiked)\r\n    .then((dataFromServer) => {\r\n      updateLikesState(cardElement, dataFromServer.likes, userId)\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка работы лайк ${err.status}`)\r\n    })\r\n}\r\n/** функция удаления карточек */ \r\nconst deleteImg = function (element) { \r\n  element.remove(); \r\n};\r\n/**функция удаления карточки */\r\nconst handleDeleteCard = (cardElement, cardId) => {\r\n  removeCard(cardId)\r\n  .then(() => {\r\n    deleteImg(cardElement)\r\n  })\r\n  .catch((err) => {\r\n    console.log(`Ошибка при удалении ${err.status}`)\r\n  })\r\n};\r\n/**функция, которая обновляет картинку аватара */\r\nconst createAvatar = function (dataAvatar) {\r\n  avatarImage.src = dataAvatar.link;\r\n  avatarImage.alt = dataAvatar.name;\r\n}\r\n\r\nexport const createCard = function (data, userId, handleChangeLikeStatus, handleDeleteCard) {\r\n  const cardElement = cardTemplate.cloneNode(true);\r\n  const cardImage = cardElement.querySelector(\".element__picture\");\r\n  const cardText = cardElement.querySelector(\".element__text\");\r\n  const likeButton = cardElement.querySelector(\".element__button\");\r\n  const rubbishButton = cardElement.querySelector(\".element__button-rubbish\");\r\n \r\n  cardImage.src = data.link;\r\n  cardImage.alt = data.name;\r\n  cardText.textContent = data.name;\r\n\r\n  updateLikesState(cardElement, data.likes, userId )\r\n\r\n  if (data.owner._id !== userId) {\r\n    rubbishButton.remove();\r\n  }\r\n\r\n  cardImage.addEventListener(\"click\", () => clickImage(data));\r\n\r\n  likeButton.addEventListener(\"click\", () => {\r\n    handleChangeLikeStatus(data._id, likeButton.classList.contains(\"element__button_active\"), cardElement, userId);\r\n  });\r\n\r\n  /** Добавляем работу rubbish*/\r\n  rubbishButton.addEventListener(\"click\", function () {\r\n    handleDeleteCard(cardElement, data._id)\r\n  });\r\n\r\n  return cardElement;\r\n}\r\n","import \"./index.css\";\r\nimport {\r\n  initialCards,\r\n  cardList,\r\n  formElementImg,\r\n  imgInputName,\r\n  imgInputLink,\r\n  profileJob,\r\n  profileName,\r\n  jobInput,\r\n  nameInput,\r\n  formEditProfile,\r\n  picPopupClose,\r\n  imgPopupClose,\r\n  imgButtonSubmit,\r\n  picPopupEl,\r\n  addImg,\r\n  popupButton,\r\n  popupPicture,\r\n  popupAddCard,\r\n  popupButtonClose,\r\n  popupProfile,\r\n  validationConfig,\r\n  avatarForm,\r\n  avatarInput,\r\n  avatarButtonSubmit,\r\n  avatarImage,\r\n  popupAvatar,\r\n  setUserInfo,\r\n  submitButtonProfile,\r\n  avatarOpenButton,\r\n} from \"../utils/constants.js\";\r\n\r\nimport { addInfofromPopup, openPopup, closePopup, closeByCross } from \"../components/modal\";\r\nimport { toggleButtonState } from \"../components/validation.js\";\r\nimport { setEventListers } from \"../components/validation\";\r\nimport {\r\n  createAvatar,\r\n  createCard,\r\n  handleChangeLikeStatus,\r\n  handleDeleteCard,\r\n} from \"../components/card.js\";\r\nimport {\r\n  getAllInfo,\r\n  addCard,\r\n  changeLikeStatus,\r\n  editProfileAvatar,\r\n  getProfileInfo,\r\n  editProfileForm,\r\n  removeCard\r\n} from \"../components/api.js\";\r\n\r\nlet userId = null;\r\n\r\n/** функция, которая создает новую карточку */\r\nfunction renderCard(data, container, userId) {\r\n  const card = createCard(\r\n    data,\r\n    userId,\r\n    handleChangeLikeStatus,\r\n    handleDeleteCard\r\n  );\r\n  container.prepend(card);\r\n};\r\n\r\n/**получаем информацию о пользователи и о загруженных карточках */\r\ngetAllInfo().then(([cards, user]) => {\r\n  setUserInfo({\r\n    userName: user.name,\r\n    userDescription: user.about,\r\n    userAvatar: user.avatar\r\n  })\r\n  userId = user._id;\r\n  /**получаем от сервера карточки и вызываем на них метод рендера каждой */\r\n  cards.reverse().forEach((card) => {\r\n    renderCard(card, cardList, userId);\r\n  });\r\n});\r\n/** открытие попапа аватара */\r\navatarOpenButton.addEventListener(\"click\", () => {\r\n  openPopup(popupAvatar);\r\n  loadSubmitButton(avatarButtonSubmit);\r\n});\r\n\r\n/** открытие попапа редактирования */\r\npopupButton.addEventListener(\"click\", function () {\r\n  openPopup(popupProfile);\r\n  addInfofromPopup(popupProfile);\r\n  loadSubmitButton(submitButtonProfile);\r\n});\r\n/** закрытие попап редактирования профиля */\r\npopupButtonClose.addEventListener(\"click\", function () {\r\n  closePopup(popupProfile);\r\n});\r\n\r\n/** открытие попапа для загрузки новых карточек */\r\naddImg.addEventListener(\"click\", function () {\r\n  openPopup(popupAddCard);\r\n  loadSubmitButton(imgButtonSubmit);\r\n});\r\n/** закрытие попап загрузки новых карточек */\r\nimgPopupClose.addEventListener(\"click\", function () {\r\n  closePopup(popupAddCard);\r\n});\r\n\r\n/** добавляем открытие попап просмотра карточек */\r\nformEditProfile.addEventListener(\"submit\", submitEditProfileForm);\r\npicPopupEl.addEventListener(\"click\", function () {\r\n  openPopup(picPopupEl);\r\n});\r\n/**функция измения статуса кнопки Сохранить на Сохранение*/\r\nconst loadSubmitButton = ((button) => {\r\n  button.addEventListener('click', () => {\r\n     button.value = \"Сохранение...\"\r\n   })\r\n  button.value = \"Сохранить\"\r\n})\r\n/** Обработчик «отправки» формы редактироания профиля*/\r\nexport function submitEditProfileForm(evt) {\r\n  evt.preventDefault();\r\n  const newDataUser = {\r\n    name: nameInput.value,\r\n    about: jobInput.value,\r\n  }\r\n  editProfileForm(newDataUser)\r\n    .then((data) => {\r\n      setUserInfo({\r\n        userName: data.name,\r\n        userDescription: data.about,\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка загрузки данных ${err.status}`)\r\n    })\r\n  /** Добавляем кнопке сабмит еще функцию закрытия */\r\n  closePopup(popupProfile);\r\n}\r\nsubmitButtonProfile.addEventListener(\"submit\", submitEditProfileForm);\r\n\r\n/** Обработчик «отправки» формы добавления карточек */\r\nexport function formSubmitHandlerImg(evt) {\r\n  evt.preventDefault();\r\n  const newCard = {\r\n    name: imgInputName.value,\r\n    link: imgInputLink.value,\r\n  };\r\n  addCard(newCard)\r\n    .then((data) => {\r\n      renderCard(data, cardList, userId);\r\n      closePopup(popupAddCard);\r\n      formElementImg.reset();\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка загрузки данных ${err.status}`)\r\n    })\r\n    \r\n  toggleButtonState(imgButtonSubmit, false, validationConfig);\r\n}\r\nformElementImg.addEventListener(\"submit\", formSubmitHandlerImg);\r\n\r\n/** Обработчик «отправки» формы для аватара */\r\nexport function formSubmitHandlerAvatar(evt) {\r\n  evt.preventDefault();\r\n  const newAvatar = {\r\n    avatar: avatarInput.value,\r\n  }\r\n  editProfileAvatar(newAvatar)\r\n    .then((dataAvatar) => {\r\n      setUserInfo({\r\n        userAvatar: dataAvatar.avatar\r\n      })\r\n      closePopup(popupAvatar);\r\n      avatarForm.reset();\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка загрузки данных ${err.status}`)\r\n    })\r\n\r\n  toggleButtonState(avatarButtonSubmit, false, validationConfig);\r\n};\r\navatarButtonSubmit.addEventListener(\"click\", formSubmitHandlerAvatar);\r\n\r\n/**проверка инпутов форм на валидность */\r\nconst enableValidation = (config) => {\r\n  const forms = document.querySelectorAll(config.formSelector);\r\n  Array.from(forms).forEach((formElement) => {\r\n    setEventListers(formElement, config);\r\n  })\r\n}\r\nenableValidation(validationConfig);\r\n"],"names":["cardList","document","querySelector","cardTemplate","content","formElementImg","imgInputName","imgInputLink","imgButtonSubmit","avatarImage","avatarOpenButton","avatarButtonSubmit","avatarForm","popupAvatar","avatarInput","popupProfile","popupButtonClose","popupAddCard","popupPicture","popupButton","addImg","submitButtonProfile","picPopupCont","picPopupEl","picText","imgPopupClose","formEditProfile","nameInput","jobInput","profileName","profileJob","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","setUserInfo","userName","userDescription","userAvatar","textContent","src","closeByEscape","evt","key","activePopup","closePopup","overlay","target","classList","contains","openPopup","popup","add","addEventListener","remove","removeEventListener","toggleButtonState","button","isActive","config","disabled","url","headers","authorization","onResponse","res","ok","json","Promise","reject","updateLikesState","cardElement","likesArray","userId","likeButton","length","Boolean","find","likeObj","_id","isLiked","handleChangeLikeStatus","cardId","dataId","isLike","fetch","method","then","dataFromServer","likes","catch","err","console","log","status","handleDeleteCard","removeCard","renderCard","data","container","card","cloneNode","cardImage","cardText","rubbishButton","link","alt","name","owner","clickImage","createCard","prepend","all","cards","user","about","avatar","reverse","forEach","loadSubmitButton","value","submitEditProfileForm","preventDefault","body","JSON","stringify","reset","dataAvatar","forms","querySelectorAll","Array","from","formElement","inputsList","submitButton","checkValidity","inputElement","isFormValid","isInputNotValid","validity","valid","errorElement","id","validationMessage","showError","hideError","checkInputValidity","setEventListers","enableValidation"],"sourceRoot":""}